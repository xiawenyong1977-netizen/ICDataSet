#!/usr/bin/env python3
"""
高度仿真的中国身份证生成程序
包含真实的区域码、校验码算法和真实的地址信息
"""

import os
import random
import re
from datetime import datetime, timedelta
from PIL import Image, ImageDraw, ImageFont
from faker import Faker
import json

# 创建支持中文的Faker实例
fake = Faker('zh_CN')

# 真实的行政区划代码（部分常用地区）
REAL_AREA_CODES = {
    # 北京市
    '110101': '北京市东城区', '110102': '北京市西城区', '110105': '北京市朝阳区',
    '110106': '北京市丰台区', '110107': '北京市石景山区', '110108': '北京市海淀区',
    '110109': '北京市门头沟区', '110111': '北京市房山区', '110112': '北京市通州区',
    '110113': '北京市顺义区', '110114': '北京市昌平区', '110115': '北京市大兴区',
    '110116': '北京市怀柔区', '110117': '北京市平谷区', '110118': '北京市密云区',
    '110119': '北京市延庆区',
    
    # 上海市
    '310101': '上海市黄浦区', '310104': '上海市徐汇区', '310105': '上海市长宁区',
    '310106': '上海市静安区', '310107': '上海市普陀区', '310109': '上海市虹口区',
    '310110': '上海市杨浦区', '310112': '上海市闵行区', '310113': '上海市宝山区',
    '310114': '上海市嘉定区', '310115': '上海市浦东新区', '310116': '上海市金山区',
    '310117': '上海市松江区', '310118': '上海市青浦区', '310120': '上海市奉贤区',
    '310151': '上海市崇明区',
    
    # 广东省
    '440101': '广州市市辖区', '440103': '广州市荔湾区', '440104': '广州市越秀区',
    '440105': '广州市海珠区', '440106': '广州市天河区', '440111': '广州市白云区',
    '440112': '广州市黄埔区', '440113': '广州市番禺区', '440114': '广州市花都区',
    '440115': '广州市南沙区', '440117': '广州市从化区', '440118': '广州市增城区',
    '440201': '韶关市市辖区', '440203': '韶关市武江区', '440204': '韶关市浈江区',
    '440205': '韶关市曲江区', '440222': '韶关市始兴县', '440224': '韶关市仁化县',
    '440229': '韶关市翁源县', '440232': '韶关市乳源瑶族自治县', '440233': '韶关市新丰县',
    '440281': '韶关市乐昌市', '440282': '韶关市南雄市',
    
    # 深圳市
    '440301': '深圳市市辖区', '440303': '深圳市罗湖区', '440304': '深圳市福田区',
    '440305': '深圳市南山区', '440306': '深圳市宝安区', '440307': '深圳市龙岗区',
    '440308': '深圳市盐田区', '440309': '深圳市龙华区', '440310': '深圳市坪山区',
    '440311': '深圳市光明区',
    
    # 江苏省
    '320101': '南京市市辖区', '320102': '南京市玄武区', '320104': '南京市秦淮区',
    '320105': '南京市建邺区', '320106': '南京市鼓楼区', '320111': '南京市浦口区',
    '320113': '南京市栖霞区', '320114': '南京市雨花台区', '320115': '南京市江宁区',
    '320116': '南京市六合区', '320117': '南京市溧水区', '320118': '南京市高淳区',
    '320201': '无锡市市辖区', '320205': '无锡市锡山区', '320206': '无锡市惠山区',
    '320211': '无锡市滨湖区', '320213': '无锡市梁溪区', '320214': '无锡市新吴区',
    '320281': '无锡市江阴市', '320282': '无锡市宜兴市',
    
    # 浙江省
    '330101': '杭州市市辖区', '330102': '杭州市上城区', '330103': '杭州市下城区',
    '330104': '杭州市江干区', '330105': '杭州市拱墅区', '330106': '杭州市西湖区',
    '330108': '杭州市滨江区', '330109': '杭州市萧山区', '330110': '杭州市余杭区',
    '330111': '杭州市富阳区', '330112': '杭州市临安区', '330113': '杭州市临平区',
    '330114': '杭州市钱塘区', '330122': '杭州市桐庐县', '330127': '杭州市淳安县',
    '330182': '杭州市建德市',
    
    # 四川省
    '510101': '成都市市辖区', '510104': '成都市锦江区', '510105': '成都市青羊区',
    '510106': '成都市金牛区', '510107': '成都市武侯区', '510108': '成都市成华区',
    '510112': '成都市龙泉驿区', '510113': '成都市青白江区', '510114': '成都市新都区',
    '510115': '成都市温江区', '510116': '成都市双流区', '510117': '成都市郫都区',
    '510118': '成都市新津区', '510121': '成都市金堂县', '510129': '成都市大邑县',
    '510131': '成都市蒲江县', '510181': '成都市都江堰市', '510182': '成都市彭州市',
    '510183': '成都市邛崃市', '510184': '成都市崇州市', '510185': '成都市简阳市',
    
    # 湖北省
    '420101': '武汉市市辖区', '420102': '武汉市江岸区', '420103': '武汉市江汉区',
    '420104': '武汉市硚口区', '420105': '武汉市汉阳区', '420106': '武汉市武昌区',
    '420107': '武汉市青山区', '420111': '武汉市洪山区', '420112': '武汉市东西湖区',
    '420113': '武汉市汉南区', '420114': '武汉市蔡甸区', '420115': '武汉市江夏区',
    '420116': '武汉市黄陂区', '420117': '武汉市新洲区',
    
    # 湖南省
    '430101': '长沙市市辖区', '430102': '长沙市芙蓉区', '430103': '长沙市天心区',
    '430104': '长沙市岳麓区', '430105': '长沙市开福区', '430111': '长沙市雨花区',
    '430112': '长沙市望城区', '430121': '长沙市长沙县', '430181': '长沙市浏阳市',
    '430182': '长沙市宁乡市',
    
    # 山东省
    '370101': '济南市市辖区', '370102': '济南市历下区', '370103': '济南市市中区',
    '370104': '济南市槐荫区', '370105': '济南市天桥区', '370112': '济南市历城区',
    '370113': '济南市长清区', '370114': '济南市章丘区', '370115': '济南市济阳区',
    '370116': '济南市莱芜区', '370117': '济南市钢城区', '370124': '济南市平阴县',
    '370126': '济南市商河县',
    
    # 河南省
    '410101': '郑州市市辖区', '410102': '郑州市中原区', '410103': '郑州市二七区',
    '410104': '郑州市管城回族区', '410105': '郑州市金水区', '410106': '郑州市上街区',
    '410108': '郑州市惠济区', '410122': '郑州市中牟县', '410181': '郑州市巩义市',
    '410182': '郑州市荥阳市', '410183': '郑州市新密市', '410184': '郑州市新郑市',
    '410185': '郑州市登封市',
    
    # 陕西省
    '610101': '西安市市辖区', '610102': '西安市新城区', '610103': '西安市碑林区',
    '610104': '西安市莲湖区', '610111': '西安市灞桥区', '610112': '西安市未央区',
    '610113': '西安市雁塔区', '610114': '西安市阎良区', '610115': '西安市临潼区',
    '610116': '西安市长安区', '610117': '西安市高陵区', '610118': '西安市鄠邑区',
    '610122': '西安市蓝田县', '610124': '西安市周至县',
    
    # 福建省
    '350101': '福州市市辖区', '350102': '福州市鼓楼区', '350103': '福州市台江区',
    '350104': '福州市仓山区', '350105': '福州市马尾区', '350111': '福州市晋安区',
    '350112': '福州市长乐区', '350121': '福州市闽侯县', '350122': '福州市连江县',
    '350123': '福州市罗源县', '350124': '福州市闽清县', '350125': '福州市永泰县',
    '350181': '福州市福清市',
    
    # 安徽省
    '340101': '合肥市市辖区', '340102': '合肥市瑶海区', '340103': '合肥市庐阳区',
    '340104': '合肥市蜀山区', '340111': '合肥市包河区', '340121': '合肥市长丰县',
    '340122': '合肥市肥东县', '340123': '合肥市肥西县', '340124': '合肥市庐江县',
    '340181': '合肥市巢湖市',
    
    # 江西省
    '360101': '南昌市市辖区', '360102': '南昌市东湖区', '360103': '南昌市西湖区',
    '360104': '南昌市青云谱区', '360105': '南昌市湾里区', '360111': '南昌市青山湖区',
    '360112': '南昌市新建区', '360121': '南昌市南昌县', '360123': '南昌市安义县',
    '360124': '南昌市进贤县',
    
    # 河北省
    '130101': '石家庄市市辖区', '130102': '石家庄市长安区', '130104': '石家庄市桥西区',
    '130105': '石家庄市新华区', '130107': '石家庄市井陉矿区', '130108': '石家庄市裕华区',
    '130109': '石家庄市藁城区', '130110': '石家庄市鹿泉区', '130111': '石家庄市栾城区',
    '130121': '石家庄市井陉县', '130123': '石家庄市正定县', '130125': '石家庄市行唐县',
    '130126': '石家庄市灵寿县', '130127': '石家庄市高邑县', '130128': '石家庄市深泽县',
    '130129': '石家庄市赞皇县', '130130': '石家庄市无极县', '130131': '石家庄市平山县',
    '130132': '石家庄市元氏县', '130133': '石家庄市赵县', '130181': '石家庄市辛集市',
    '130183': '石家庄市晋州市', '130184': '石家庄市新乐市',
    
    # 山西省
    '140101': '太原市市辖区', '140105': '太原市小店区', '140106': '太原市迎泽区',
    '140107': '太原市杏花岭区', '140108': '太原市尖草坪区', '140109': '太原市万柏林区',
    '140110': '太原市晋源区', '140121': '太原市清徐县', '140122': '太原市阳曲县',
    '140123': '太原市娄烦县', '140181': '太原市古交市',
    
    # 内蒙古自治区
    '150101': '呼和浩特市市辖区', '150102': '呼和浩特市新城区', '150103': '呼和浩特市回民区',
    '150104': '呼和浩特市玉泉区', '150105': '呼和浩特市赛罕区', '150121': '呼和浩特市土默特左旗',
    '150122': '呼和浩特市托克托县', '150123': '呼和浩特市和林格尔县', '150124': '呼和浩特市清水河县',
    '150125': '呼和浩特市武川县',
    
    # 辽宁省
    '210101': '沈阳市市辖区', '210102': '沈阳市和平区', '210103': '沈阳市沈河区',
    '210104': '沈阳市大东区', '210105': '沈阳市皇姑区', '210106': '沈阳市铁西区',
    '210111': '沈阳市苏家屯区', '210112': '沈阳市浑南区', '210113': '沈阳市沈北新区',
    '210114': '沈阳市于洪区', '210115': '沈阳市辽中区', '210123': '沈阳市康平县',
    '210124': '沈阳市法库县', '210181': '沈阳市新民市',
    
    # 吉林省
    '220101': '长春市市辖区', '220102': '长春市南关区', '220103': '长春市宽城区',
    '220104': '长春市朝阳区', '220105': '长春市二道区', '220106': '长春市绿园区',
    '220112': '长春市双阳区', '220113': '长春市九台区', '220122': '长春市农安县',
    '220182': '长春市榆树市', '220183': '长春市德惠市',
    
    # 黑龙江省
    '230101': '哈尔滨市市辖区', '230102': '哈尔滨市道里区', '230103': '哈尔滨市南岗区',
    '230104': '哈尔滨市道外区', '230108': '哈尔滨市平房区', '230109': '哈尔滨市松北区',
    '230110': '哈尔滨市香坊区', '230111': '哈尔滨市呼兰区', '230112': '哈尔滨市阿城区',
    '230113': '哈尔滨市双城区', '230123': '哈尔滨市依兰县', '230124': '哈尔滨市方正县',
    '230125': '哈尔滨市宾县', '230126': '哈尔滨市巴彦县', '230127': '哈尔滨市木兰县',
    '230128': '哈尔滨市通河县', '230129': '哈尔滨市延寿县', '230183': '哈尔滨市尚志市',
    '230184': '哈尔滨市五常市',
    
    # 云南省
    '530101': '昆明市市辖区', '530102': '昆明市五华区', '530103': '昆明市盘龙区',
    '530111': '昆明市官渡区', '530112': '昆明市西山区', '530113': '昆明市东川区',
    '530114': '昆明市呈贡区', '530115': '昆明市晋宁区', '530116': '昆明市富民区',
    '530117': '昆明市宜良区', '530118': '昆明市石林彝族自治县', '530119': '昆明市嵩明县',
    '530124': '昆明市禄劝彝族苗族自治县', '530125': '昆明市寻甸回族彝族自治县',
    '530181': '昆明市安宁市',
    
    # 贵州省
    '520101': '贵阳市市辖区', '520102': '贵阳市南明区', '520103': '贵阳市云岩区',
    '520111': '贵阳市花溪区', '520112': '贵阳市乌当区', '520113': '贵阳市白云区',
    '520115': '贵阳市观山湖区', '520121': '贵阳市开阳县', '520122': '贵阳市息烽县',
    '520123': '贵阳市修文县', '520181': '贵阳市清镇市',
    
    # 广西壮族自治区
    '450101': '南宁市市辖区', '450102': '南宁市兴宁区', '450103': '南宁市青秀区',
    '450105': '南宁市江南区', '450107': '南宁市西乡塘区', '450108': '南宁市良庆区',
    '450109': '南宁市邕宁区', '450110': '南宁市武鸣区', '450123': '南宁市隆安县',
    '450124': '南宁市马山县', '450125': '南宁市上林县', '450126': '南宁市宾阳县',
    '450127': '南宁市横县',
    
    # 海南省
    '460101': '海口市市辖区', '460105': '海口市秀英区', '460106': '海口市龙华区',
    '460107': '海口市琼山区', '460108': '海口市美兰区',
    '460201': '三亚市市辖区', '460202': '三亚市海棠区', '460203': '三亚市吉阳区',
    '460204': '三亚市天涯区', '460205': '三亚市崖州区',
    
    # 重庆市
    '500101': '重庆市万州区', '500102': '重庆市涪陵区', '500103': '重庆市渝中区',
    '500104': '重庆市大渡口区', '500105': '重庆市江北区', '500106': '重庆市沙坪坝区',
    '500107': '重庆市九龙坡区', '500108': '重庆市南岸区', '500109': '重庆市北碚区',
    '500110': '重庆市綦江区', '500111': '重庆市大足区', '500112': '重庆市渝北区',
    '500113': '重庆市巴南区', '500114': '重庆市黔江区', '500115': '重庆市长寿区',
    '500116': '重庆市江津区', '500117': '重庆市合川区', '500118': '重庆市永川区',
    '500119': '重庆市南川区', '500120': '重庆市璧山区', '500151': '重庆市铜梁区',
    '500152': '重庆市潼南区', '500153': '重庆市荣昌区', '500154': '重庆市开州区',
    '500155': '重庆市梁平区', '500156': '重庆市武隆区', '500229': '重庆市城口县',
    '500230': '重庆市丰都县', '500231': '重庆市垫江县', '500233': '重庆市忠县',
    '500235': '重庆市云阳县', '500236': '重庆市奉节县', '500237': '重庆市巫山县',
    '500238': '重庆市巫溪县', '500240': '重庆市石柱土家族自治县', '500241': '重庆市秀山土家族苗族自治县',
    '500242': '重庆市酉阳土家族苗族自治县', '500243': '重庆市彭水苗族土家族自治县',
    
    # 天津市
    '120101': '天津市和平区', '120102': '天津市河东区', '120103': '天津市河西区',
    '120104': '天津市南开区', '120105': '天津市河北区', '120106': '天津市红桥区',
    '120110': '天津市东丽区', '120111': '天津市西青区', '120112': '天津市津南区',
    '120113': '天津市北辰区', '120114': '天津市武清区', '120115': '天津市宝坻区',
    '120116': '天津市滨海新区', '120117': '天津市宁河区', '120118': '天津市静海区',
    '120119': '天津市蓟州区',
    
    # 新疆维吾尔自治区
    '650101': '乌鲁木齐市市辖区', '650102': '乌鲁木齐市天山区', '650103': '乌鲁木齐市沙依巴克区',
    '650104': '乌鲁木齐市新市区', '650105': '乌鲁木齐市水磨沟区', '650106': '乌鲁木齐市头屯河区',
    '650107': '乌鲁木齐市达坂城区', '650109': '乌鲁木齐市米东区', '650121': '乌鲁木齐市乌鲁木齐县',
    
    # 西藏自治区
    '540101': '拉萨市市辖区', '540102': '拉萨市城关区', '540103': '拉萨市堆龙德庆区',
    '540104': '拉萨市达孜区', '540121': '拉萨市林周县', '540122': '拉萨市当雄县',
    '540123': '拉萨市尼木县', '540124': '拉萨市曲水县', '540127': '拉萨市墨竹工卡县',
    
    # 宁夏回族自治区
    '640101': '银川市市辖区', '640104': '银川市兴庆区', '640105': '银川市西夏区',
    '640106': '银川市金凤区', '640121': '银川市永宁县', '640122': '银川市贺兰县',
    '640181': '银川市灵武市',
    
    # 甘肃省
    '620101': '兰州市市辖区', '620102': '兰州市城关区', '620103': '兰州市七里河区',
    '620104': '兰州市西固区', '620105': '兰州市安宁区', '620111': '兰州市红古区',
    '620121': '兰州市永登县', '620122': '兰州市皋兰县', '620123': '兰州市榆中县',
    
    # 青海省
    '630101': '西宁市市辖区', '630102': '西宁市城东区', '630103': '西宁市城中区',
    '630104': '西宁市城西区', '630105': '西宁市城北区', '630121': '西宁市大通回族土族自治县',
    '630123': '西宁市湟源县',
}

# 真实的发证机关名称
REAL_AUTHORITIES = {
    '北京市': ['北京市公安局东城分局', '北京市公安局西城分局', '北京市公安局朝阳分局',
              '北京市公安局海淀分局', '北京市公安局丰台分局', '北京市公安局石景山分局',
              '北京市公安局门头沟分局', '北京市公安局房山分局', '北京市公安局通州分局',
              '北京市公安局顺义分局', '北京市公安局昌平分局', '北京市公安局大兴分局',
              '北京市公安局怀柔分局', '北京市公安局平谷分局', '北京市公安局密云分局',
              '北京市公安局延庆分局'],
    
    '上海市': ['上海市公安局黄浦分局', '上海市公安局徐汇分局', '上海市公安局长宁分局',
              '上海市公安局静安分局', '上海市公安局普陀分局', '上海市公安局虹口分局',
              '上海市公安局杨浦分局', '上海市公安局闵行分局', '上海市公安局宝山分局',
              '上海市公安局嘉定分局', '上海市公安局浦东分局', '上海市公安局金山分局',
              '上海市公安局松江分局', '上海市公安局青浦分局', '上海市公安局奉贤分局',
              '上海市公安局崇明分局'],
    
    '天津市': ['天津市公安局和平分局', '天津市公安局河东分局', '天津市公安局河西分局',
              '天津市公安局南开分局', '天津市公安局河北分局', '天津市公安局红桥分局',
              '天津市公安局东丽分局', '天津市公安局西青分局', '天津市公安局津南分局',
              '天津市公安局北辰分局', '天津市公安局武清分局', '天津市公安局宝坻分局',
              '天津市公安局滨海新区分局', '天津市公安局宁河分局', '天津市公安局静海分局',
              '天津市公安局蓟州分局'],
    
    '重庆市': ['重庆市公安局万州分局', '重庆市公安局涪陵分局', '重庆市公安局渝中分局',
              '重庆市公安局大渡口分局', '重庆市公安局江北分局', '重庆市公安局沙坪坝分局',
              '重庆市公安局九龙坡分局', '重庆市公安局南岸分局', '重庆市公安局北碚分局',
              '重庆市公安局綦江分局', '重庆市公安局大足分局', '重庆市公安局渝北分局',
              '重庆市公安局巴南分局', '重庆市公安局黔江分局', '重庆市公安局长寿分局',
              '重庆市公安局江津分局', '重庆市公安局合川分局', '重庆市公安局永川分局',
              '重庆市公安局南川分局', '重庆市公安局璧山分局', '重庆市公安局铜梁分局',
              '重庆市公安局潼南分局', '重庆市公安局荣昌分局', '重庆市公安局开州分局',
              '重庆市公安局梁平分局', '重庆市公安局武隆分局'],
    
    '内蒙古': ['呼和浩特市公安局新城区分局', '呼和浩特市公安局回民区分局', '呼和浩特市公安局玉泉区分局',
              '呼和浩特市公安局赛罕区分局', '包头市公安局东河区分局', '包头市公安局昆都仑区分局',
              '包头市公安局青山区分局', '包头市公安局石拐区分局', '包头市公安局白云鄂博矿区分局',
              '包头市公安局九原区分局', '乌海市公安局海勃湾区分局', '乌海市公安局海南区分局',
              '乌海市公安局乌达区分局', '赤峰市公安局红山区分局', '赤峰市公安局元宝山区分局',
              '赤峰市公安局松山区分局'],
    
    '新疆': ['乌鲁木齐市公安局天山区分局', '乌鲁木齐市公安局沙依巴克区分局', '乌鲁木齐市公安局新市区分局',
            '乌鲁木齐市公安局水磨沟区分局', '乌鲁木齐市公安局头屯河区分局', '乌鲁木齐市公安局达坂城区分局',
            '乌鲁木齐市公安局米东区分局', '克拉玛依市公安局克拉玛依区分局', '克拉玛依市公安局独山子区分局',
            '克拉玛依市公安局白碱滩区分局', '克拉玛依市公安局乌尔禾区分局', '吐鲁番市公安局高昌区分局',
            '吐鲁番市公安局鄯善县公安局', '吐鲁番市公安局托克逊县公安局'],
    
    '西藏': ['拉萨市公安局城关区分局', '拉萨市公安局堆龙德庆区分局', '拉萨市公安局达孜区分局',
            '拉萨市公安局林周县公安局', '拉萨市公安局当雄县公安局', '拉萨市公安局尼木县公安局',
            '拉萨市公安局曲水县公安局', '拉萨市公安局墨竹工卡县公安局', '日喀则市公安局桑珠孜区分局',
            '日喀则市公安局南木林县公安局', '日喀则市公安局江孜县公安局', '日喀则市公安局定日县公安局'],
    
    '广西': ['南宁市公安局兴宁区分局', '南宁市公安局青秀区分局', '南宁市公安局江南区分局',
            '南宁市公安局西乡塘区分局', '南宁市公安局良庆区分局', '南宁市公安局邕宁区分局',
            '南宁市公安局武鸣区分局', '柳州市公安局城中区分局', '柳州市公安局鱼峰区分局',
            '柳州市公安局柳南区分局', '柳州市公安局柳北区分局', '柳州市公安局柳江区分局',
            '桂林市公安局秀峰区分局', '桂林市公安局叠彩区分局', '桂林市公安局象山区分局',
            '桂林市公安局七星区分局', '桂林市公安局雁山区分局', '桂林市公安局临桂区分局'],
    
    '宁夏': ['银川市公安局兴庆区分局', '银川市公安局西夏区分局', '银川市公安局金凤区分局',
            '银川市公安局永宁县公安局', '银川市公安局贺兰县公安局', '银川市公安局灵武市公安局',
            '石嘴山市公安局大武口区分局', '石嘴山市公安局惠农区分局', '石嘴山市公安局平罗县公安局',
            '吴忠市公安局利通区分局', '吴忠市公安局红寺堡区分局', '吴忠市公安局盐池县公安局',
            '吴忠市公安局同心县公安局', '吴忠市公安局青铜峡市公安局'],
    
    '云南省': ['昆明市公安局五华区分局', '昆明市公安局盘龙区分局', '昆明市公安局官渡区分局',
              '昆明市公安局西山区分局', '昆明市公安局东川区分局', '昆明市公安局呈贡区分局',
              '昆明市公安局晋宁区分局', '昆明市公安局富民县公安局', '昆明市公安局宜良县公安局',
              '昆明市公安局石林彝族自治县公安局', '昆明市公安局嵩明县公安局', '昆明市公安局禄劝彝族苗族自治县公安局',
              '昆明市公安局寻甸回族彝族自治县公安局', '昆明市公安局安宁市公安局'],
    
    '贵州省': ['贵阳市公安局南明区分局', '贵阳市公安局云岩区分局', '贵阳市公安局花溪区分局',
              '贵阳市公安局乌当区分局', '贵阳市公安局白云区分局', '贵阳市公安局观山湖区分局',
              '贵阳市公安局开阳县公安局', '贵阳市公安局息烽县公安局', '贵阳市公安局修文县公安局',
              '贵阳市公安局清镇市公安局', '六盘水市公安局钟山区分局', '六盘水市公安局六枝特区分局',
              '六盘水市公安局水城县公安局', '六盘水市公安局盘州市公安局'],
    
    '四川省': ['成都市公安局锦江分局', '成都市公安局青羊分局', '成都市公安局金牛分局',
              '成都市公安局武侯分局', '成都市公安局成华分局', '成都市公安局龙泉驿分局',
              '成都市公安局青白江分局', '成都市公安局新都分局', '成都市公安局温江分局',
              '成都市公安局双流分局', '成都市公安局郫都分局', '成都市公安局新津分局',
              '成都市公安局金堂县公安局', '成都市公安局大邑县公安局', '成都市公安局蒲江县公安局',
              '成都市公安局都江堰市公安局', '成都市公安局彭州市公安局', '成都市公安局邛崃市公安局',
              '成都市公安局崇州市公安局', '成都市公安局简阳市公安局'],
    
    '湖南省': ['长沙市公安局芙蓉区分局', '长沙市公安局天心区分局', '长沙市公安局岳麓区分局',
              '长沙市公安局开福区分局', '长沙市公安局雨花区分局', '长沙市公安局望城区分局',
              '长沙市公安局长沙县公安局', '长沙市公安局浏阳市公安局', '长沙市公安局宁乡市公安局',
              '株洲市公安局荷塘区分局', '株洲市公安局芦淞区分局', '株洲市公安局石峰区分局',
              '株洲市公安局天元区分局', '株洲市公安局渌口区分局', '株洲市公安局攸县公安局'],
    
    '湖北省': ['武汉市公安局江岸区分局', '武汉市公安局江汉区分局', '武汉市公安局硚口区分局',
              '武汉市公安局汉阳区分局', '武汉市公安局武昌区分局', '武汉市公安局青山区分局',
              '武汉市公安局洪山区分局', '武汉市公安局东西湖区分局', '武汉市公安局汉南区分局',
              '武汉市公安局蔡甸区分局', '武汉市公安局江夏区分局', '武汉市公安局黄陂区分局',
              '武汉市公安局新洲区分局'],
    
    '广东省': ['广州市公安局荔湾分局', '广州市公安局越秀分局', '广州市公安局海珠分局',
              '广州市公安局天河分局', '广州市公安局白云分局', '广州市公安局黄埔分局',
              '广州市公安局番禺分局', '广州市公安局花都分局', '广州市公安局南沙分局',
              '广州市公安局从化分局', '广州市公安局增城分局', '深圳市公安局罗湖分局',
              '深圳市公安局福田分局', '深圳市公安局南山分局', '深圳市公安局宝安分局',
              '深圳市公安局龙岗分局', '深圳市公安局盐田分局', '深圳市公安局龙华分局',
              '深圳市公安局坪山分局', '深圳市公安局光明分局'],
    
    '海南省': ['海口市公安局秀英区分局', '海口市公安局龙华区分局', '海口市公安局琼山区分局',
              '海口市公安局美兰区分局', '三亚市公安局海棠区分局', '三亚市公安局吉阳区分局',
              '三亚市公安局天涯区分局', '三亚市公安局崖州区分局', '三沙市公安局西沙分局',
              '三沙市公安局南沙分局', '三沙市公安局中沙分局'],
    
    '福建省': ['福州市公安局鼓楼分局', '福州市公安局台江分局', '福州市公安局仓山分局',
              '福州市公安局马尾分局', '福州市公安局晋安分局', '福州市公安局长乐分局',
              '福州市公安局闽侯县公安局', '福州市公安局连江县公安局', '福州市公安局罗源县公安局',
              '福州市公安局闽清县公安局', '福州市公安局永泰县公安局', '福州市公安局平潭县公安局',
              '福州市公安局福清市公安局'],
    
    '浙江省': ['杭州市公安局上城分局', '杭州市公安局下城分局', '杭州市公安局江干分局',
              '杭州市公安局拱墅分局', '杭州市公安局西湖分局', '杭州市公安局滨江分局',
              '杭州市公安局萧山分局', '杭州市公安局余杭分局', '杭州市公安局富阳分局',
              '杭州市公安局临安分局', '杭州市公安局临平分局', '杭州市公安局钱塘分局',
              '杭州市公安局桐庐县公安局', '杭州市公安局淳安县公安局', '杭州市公安局建德市公安局'],
    
    '江苏省': ['南京市公安局玄武分局', '南京市公安局秦淮分局', '南京市公安局建邺分局',
              '南京市公安局鼓楼分局', '南京市公安局浦口分局', '南京市公安局栖霞分局',
              '南京市公安局雨花台分局', '南京市公安局江宁分局', '南京市公安局六合分局',
              '南京市公安局溧水分局', '南京市公安局高淳分局', '无锡市公安局锡山分局',
              '无锡市公安局惠山分局', '无锡市公安局滨湖分局', '无锡市公安局梁溪分局',
              '无锡市公安局新吴分局', '无锡市公安局江阴市公安局', '无锡市公安局宜兴市公安局'],
    
    '山东省': ['济南市公安局历下分局', '济南市公安局市中分局', '济南市公安局槐荫分局',
              '济南市公安局天桥分局', '济南市公安局历城分局', '济南市公安局长清分局',
              '济南市公安局章丘分局', '济南市公安局济阳分局', '济南市公安局莱芜分局',
              '济南市公安局钢城分局', '济南市公安局平阴县公安局', '济南市公安局商河县公安局'],
    
    '河南省': ['郑州市公安局中原分局', '郑州市公安局二七分局', '郑州市公安局管城回族区分局',
              '郑州市公安局金水分局', '郑州市公安局上街分局', '郑州市公安局惠济分局',
              '郑州市公安局中牟县公安局', '郑州市公安局巩义市公安局', '郑州市公安局荥阳市公安局',
              '郑州市公安局新密市公安局', '郑州市公安局新郑市公安局', '郑州市公安局登封市公安局'],
    
    '河北省': ['石家庄市公安局长安分局', '石家庄市公安局桥西分局', '石家庄市公安局新华分局',
              '石家庄市公安局井陉矿区分局', '石家庄市公安局裕华分局', '石家庄市公安局藁城分局',
              '石家庄市公安局鹿泉分局', '石家庄市公安局栾城分局', '石家庄市公安局井陉县公安局',
              '石家庄市公安局正定县公安局', '石家庄市公安局行唐县公安局', '石家庄市公安局灵寿县公安局'],
    
    '山西省': ['太原市公安局小店分局', '太原市公安局迎泽分局', '太原市公安局杏花岭分局',
              '太原市公安局尖草坪分局', '太原市公安局万柏林分局', '太原市公安局晋源分局',
              '太原市公安局清徐县公安局', '太原市公安局阳曲县公安局', '太原市公安局娄烦县公安局',
              '太原市公安局古交市公安局'],
    
    '陕西省': ['西安市公安局新城区分局', '西安市公安局碑林分局', '西安市公安局莲湖分局',
              '西安市公安局灞桥分局', '西安市公安局未央分局', '西安市公安局雁塔分局',
              '西安市公安局阎良分局', '西安市公安局临潼分局', '西安市公安局长安分局',
              '西安市公安局高陵分局', '西安市公安局鄠邑分局', '西安市公安局蓝田县公安局',
              '西安市公安局周至县公安局'],
    
    '甘肃省': ['兰州市公安局城关分局', '兰州市公安局七里河分局', '兰州市公安局西固分局',
              '兰州市公安局安宁分局', '兰州市公安局红古分局', '兰州市公安局永登县公安局',
              '兰州市公安局皋兰县公安局', '兰州市公安局榆中县公安局', '嘉峪关市公安局雄关分局',
              '嘉峪关市公安局镜铁分局', '嘉峪关市公安局长城分局'],
    
    '青海省': ['西宁市公安局城东分局', '西宁市公安局城中分局', '西宁市公安局城西分局',
              '西宁市公安局城北分局', '西宁市公安局大通回族土族自治县公安局', '西宁市公安局湟中县公安局',
              '西宁市公安局湟源县公安局', '海东市公安局乐都分局', '海东市公安局平安分局',
              '海东市公安局民和回族土族自治县公安局', '海东市公安局互助土族自治县公安局'],
    
    '辽宁省': ['沈阳市公安局和平分局', '沈阳市公安局沈河分局', '沈阳市公安局大东分局',
              '沈阳市公安局皇姑分局', '沈阳市公安局铁西分局', '沈阳市公安局苏家屯分局',
              '沈阳市公安局浑南分局', '沈阳市公安局沈北新区分局', '沈阳市公安局于洪分局',
              '沈阳市公安局辽中分局', '沈阳市公安局康平县公安局', '沈阳市公安局法库县公安局',
              '沈阳市公安局新民市公安局'],
    
    '吉林省': ['长春市公安局南关分局', '长春市公安局宽城分局', '长春市公安局朝阳分局',
              '长春市公安局二道分局', '长春市公安局绿园分局', '长春市公安局双阳分局',
              '长春市公安局九台分局', '长春市公安局农安县公安局', '长春市公安局榆树市公安局',
              '长春市公安局德惠市公安局'],
    
    '黑龙江省': ['哈尔滨市公安局道里分局', '哈尔滨市公安局南岗分局', '哈尔滨市公安局道外分局',
                '哈尔滨市公安局平房分局', '哈尔滨市公安局松北分局', '哈尔滨市公安局香坊分局',
                '哈尔滨市公安局呼兰分局', '哈尔滨市公安局阿城分局', '哈尔滨市公安局双城分局',
                '哈尔滨市公安局依兰县公安局', '哈尔滨市公安局方正县公安局', '哈尔滨市公安局宾县公安局',
                '哈尔滨市公安局巴彦县公安局', '哈尔滨市公安局木兰县公安局', '哈尔滨市公安局通河县公安局',
                '哈尔滨市公安局延寿县公安局', '哈尔滨市公安局尚志市公安局', '哈尔滨市公安局五常市公安局'],
    
    '安徽省': ['合肥市公安局瑶海分局', '合肥市公安局庐阳分局', '合肥市公安局蜀山分局',
              '合肥市公安局包河分局', '合肥市公安局长丰县公安局', '合肥市公安局肥东县公安局',
              '合肥市公安局肥西县公安局', '合肥市公安局庐江县公安局', '合肥市公安局巢湖市公安局'],
    
    '江西省': ['南昌市公安局东湖分局', '南昌市公安局西湖分局', '南昌市公安局青云谱分局',
              '南昌市公安局湾里分局', '南昌市公安局青山湖分局', '南昌市公安局新建分局',
              '南昌市公安局南昌县公安局', '南昌市公安局安义县公安局', '南昌市公安局进贤县公安局'],
}

# 真实的民族列表
REAL_NATIONS = ['汉', '蒙古', '回', '藏', '维吾尔', '苗', '彝', '壮', '布依', '朝鲜', 
                '满', '侗', '瑶', '白', '土家', '哈尼', '哈萨克', '傣', '黎', '傈僳',
                '佤', '畲', '高山', '拉祜', '水', '东乡', '纳西', '景颇', '柯尔克孜',
                '土', '达斡尔', '仫佬', '羌', '布朗', '撒拉', '毛南', '仡佬', '锡伯',
                '阿昌', '普米', '塔吉克', '怒', '乌孜别克', '俄罗斯', '鄂温克', '德昂',
                '保安', '裕固', '京', '塔塔尔', '独龙', '鄂伦春', '赫哲', '门巴', '珞巴', '基诺']

# 各地区民族分布概率（基于人口普查数据）
REGIONAL_NATION_DISTRIBUTION = {
    # 北京市 - 汉族占绝大多数，少数民族主要是满、回、蒙古等
    '北京市': {
        '汉': 0.95, '满': 0.02, '回': 0.015, '蒙古': 0.01, '朝鲜': 0.003, '维吾尔': 0.001, '其他': 0.001
    },
    
    # 上海市 - 汉族占绝大多数，少数民族主要是回、满等
    '上海市': {
        '汉': 0.97, '回': 0.015, '满': 0.008, '蒙古': 0.003, '朝鲜': 0.002, '其他': 0.002
    },
    
    # 天津市 - 汉族占绝大多数，少数民族主要是回、满等
    '天津市': {
        '汉': 0.96, '回': 0.02, '满': 0.015, '蒙古': 0.003, '朝鲜': 0.001, '其他': 0.001
    },
    
    # 重庆市 - 汉族占多数，土家族、苗族较多
    '重庆市': {
        '汉': 0.85, '土家': 0.08, '苗': 0.04, '回': 0.015, '满': 0.008, '蒙古': 0.003, '其他': 0.004
    },
    
    # 内蒙古自治区 - 蒙古族、汉族为主
    '内蒙古': {
        '汉': 0.75, '蒙古': 0.20, '满': 0.02, '回': 0.015, '达斡尔': 0.008, '鄂温克': 0.003, '其他': 0.004
    },
    
    # 新疆维吾尔自治区 - 维吾尔族、汉族为主
    '新疆': {
        '汉': 0.40, '维吾尔': 0.45, '哈萨克': 0.07, '回': 0.04, '柯尔克孜': 0.015, '蒙古': 0.01, '其他': 0.015
    },
    
    # 西藏自治区 - 藏族、汉族为主
    '西藏': {
        '藏': 0.90, '汉': 0.08, '门巴': 0.008, '珞巴': 0.005, '回': 0.003, '其他': 0.004
    },
    
    # 广西壮族自治区 - 壮族、汉族为主
    '广西': {
        '汉': 0.60, '壮': 0.32, '瑶': 0.03, '苗': 0.02, '侗': 0.015, '仫佬': 0.008, '毛南': 0.003, '其他': 0.002
    },
    
    # 宁夏回族自治区 - 回族、汉族为主
    '宁夏': {
        '汉': 0.65, '回': 0.33, '满': 0.01, '蒙古': 0.005, '其他': 0.005
    },
    
    # 云南省 - 少数民族众多
    '云南省': {
        '汉': 0.65, '彝': 0.12, '白': 0.08, '哈尼': 0.04, '傣': 0.03, '苗': 0.025, '傈僳': 0.015, 
        '回': 0.015, '拉祜': 0.008, '佤': 0.008, '纳西': 0.008, '瑶': 0.008, '景颇': 0.005, '布朗': 0.005, '其他': 0.008
    },
    
    # 贵州省 - 少数民族众多
    '贵州省': {
        '汉': 0.60, '苗': 0.15, '布依': 0.12, '侗': 0.05, '土家': 0.03, '彝': 0.02, '仡佬': 0.015, 
        '水': 0.008, '回': 0.008, '白': 0.005, '瑶': 0.005, '其他': 0.004
    },
    
    # 四川省 - 汉族为主，彝族较多
    '四川省': {
        '汉': 0.85, '彝': 0.08, '藏': 0.03, '羌': 0.015, '回': 0.015, '苗': 0.005, '土家': 0.005, '其他': 0.005
    },
    
    # 湖南省 - 汉族为主，土家族、苗族较多
    '湖南省': {
        '汉': 0.85, '土家': 0.08, '苗': 0.04, '侗': 0.015, '瑶': 0.015, '回': 0.008, '白': 0.005, '其他': 0.002
    },
    
    # 湖北省 - 汉族为主，土家族较多
    '湖北省': {
        '汉': 0.90, '土家': 0.06, '苗': 0.02, '回': 0.015, '侗': 0.005, '其他': 0.005
    },
    
    # 广东省 - 汉族为主，少数民族主要是瑶、壮等
    '广东省': {
        '汉': 0.95, '瑶': 0.02, '壮': 0.015, '回': 0.008, '满': 0.003, '苗': 0.002, '其他': 0.002
    },
    
    # 海南省 - 汉族为主，黎族、苗族较多
    '海南省': {
        '汉': 0.85, '黎': 0.12, '苗': 0.02, '回': 0.008, '壮': 0.005, '其他': 0.005
    },
    
    # 福建省 - 汉族为主，畲族较多
    '福建省': {
        '汉': 0.95, '畲': 0.03, '回': 0.015, '满': 0.003, '苗': 0.002, '其他': 0.002
    },
    
    # 浙江省 - 汉族占绝大多数
    '浙江省': {
        '汉': 0.98, '畲': 0.015, '回': 0.003, '满': 0.001, '其他': 0.001
    },
    
    # 江苏省 - 汉族占绝大多数
    '江苏省': {
        '汉': 0.98, '回': 0.015, '满': 0.003, '蒙古': 0.001, '其他': 0.001
    },
    
    # 山东省 - 汉族占绝大多数
    '山东省': {
        '汉': 0.98, '回': 0.015, '满': 0.003, '蒙古': 0.001, '其他': 0.001
    },
    
    # 河南省 - 汉族占绝大多数
    '河南省': {
        '汉': 0.98, '回': 0.015, '满': 0.003, '蒙古': 0.001, '其他': 0.001
    },
    
    # 河北省 - 汉族占绝大多数
    '河北省': {
        '汉': 0.97, '回': 0.02, '满': 0.008, '蒙古': 0.002, '其他': 0.002
    },
    
    # 山西省 - 汉族占绝大多数
    '山西省': {
        '汉': 0.98, '回': 0.015, '满': 0.003, '蒙古': 0.001, '其他': 0.001
    },
    
    # 陕西省 - 汉族占绝大多数
    '陕西省': {
        '汉': 0.97, '回': 0.02, '满': 0.008, '蒙古': 0.002, '其他': 0.002
    },
    
    # 甘肃省 - 汉族为主，回族较多
    '甘肃省': {
        '汉': 0.85, '回': 0.12, '藏': 0.015, '东乡': 0.008, '保安': 0.003, '其他': 0.002
    },
    
    # 青海省 - 汉族、藏族为主
    '青海省': {
        '汉': 0.55, '藏': 0.25, '回': 0.15, '土': 0.03, '撒拉': 0.015, '蒙古': 0.005, '其他': 0.005
    },
    
    # 辽宁省 - 汉族为主，满族较多
    '辽宁省': {
        '汉': 0.85, '满': 0.12, '蒙古': 0.015, '回': 0.008, '朝鲜': 0.005, '锡伯': 0.002, '其他': 0.002
    },
    
    # 吉林省 - 汉族为主，朝鲜族较多
    '吉林省': {
        '汉': 0.85, '朝鲜': 0.08, '满': 0.04, '蒙古': 0.015, '回': 0.008, '锡伯': 0.003, '其他': 0.002
    },
    
    # 黑龙江省 - 汉族为主，满族较多
    '黑龙江省': {
        '汉': 0.90, '满': 0.06, '蒙古': 0.02, '朝鲜': 0.015, '回': 0.003, '达斡尔': 0.001, '鄂伦春': 0.001, '其他': 0.002
    },
    
    # 安徽省 - 汉族占绝大多数
    '安徽省': {
        '汉': 0.98, '回': 0.015, '满': 0.003, '蒙古': 0.001, '其他': 0.001
    },
    
    # 江西省 - 汉族占绝大多数
    '江西省': {
        '汉': 0.98, '回': 0.015, '满': 0.003, '蒙古': 0.001, '其他': 0.001
    },
    
    # 台湾省 - 汉族占绝大多数
    '台湾省': {
        '汉': 0.98, '高山': 0.015, '回': 0.003, '满': 0.001, '其他': 0.001
    },
    
    # 香港特别行政区 - 汉族占绝大多数
    '香港': {
        '汉': 0.98, '回': 0.015, '满': 0.003, '蒙古': 0.001, '其他': 0.001
    },
    
    # 澳门特别行政区 - 汉族占绝大多数
    '澳门': {
        '汉': 0.98, '回': 0.015, '满': 0.003, '蒙古': 0.001, '其他': 0.001
    }
}

def get_province_from_area_code(area_code):
    """根据区域码获取省份名称"""
    area_name = REAL_AREA_CODES.get(area_code, '')
    if not area_name:
        return '北京市'  # 默认返回北京市
    
    # 提取省份名称
    if area_name.startswith('北京市'):
        return '北京市'
    elif area_name.startswith('上海市'):
        return '上海市'
    elif area_name.startswith('天津市'):
        return '天津市'
    elif area_name.startswith('重庆市'):
        return '重庆市'
    elif area_name.startswith('内蒙古'):
        return '内蒙古'
    elif area_name.startswith('新疆'):
        return '新疆'
    elif area_name.startswith('西藏'):
        return '西藏'
    elif area_name.startswith('广西'):
        return '广西'
    elif area_name.startswith('宁夏'):
        return '宁夏'
    elif area_name.startswith('云南省'):
        return '云南省'
    elif area_name.startswith('贵州省'):
        return '贵州省'
    elif area_name.startswith('四川省'):
        return '四川省'
    elif area_name.startswith('湖南省'):
        return '湖南省'
    elif area_name.startswith('湖北省'):
        return '湖北省'
    elif area_name.startswith('广东省'):
        return '广东省'
    elif area_name.startswith('海南省'):
        return '海南省'
    elif area_name.startswith('福建省'):
        return '福建省'
    elif area_name.startswith('浙江省'):
        return '浙江省'
    elif area_name.startswith('江苏省'):
        return '江苏省'
    elif area_name.startswith('山东省'):
        return '山东省'
    elif area_name.startswith('河南省'):
        return '河南省'
    elif area_name.startswith('河北省'):
        return '河北省'
    elif area_name.startswith('山西省'):
        return '山西省'
    elif area_name.startswith('陕西省'):
        return '陕西省'
    elif area_name.startswith('甘肃省'):
        return '甘肃省'
    elif area_name.startswith('青海省'):
        return '青海省'
    elif area_name.startswith('辽宁省'):
        return '辽宁省'
    elif area_name.startswith('吉林省'):
        return '吉林省'
    elif area_name.startswith('黑龙江省'):
        return '黑龙江省'
    elif area_name.startswith('安徽省'):
        return '安徽省'
    elif area_name.startswith('江西省'):
        return '江西省'
    else:
        # 提取省份名称（前两个字符）
        return area_name[:2] + '省'

def select_nation_by_region(area_code):
    """根据区域码选择符合当地民族分布的民族"""
    province = get_province_from_area_code(area_code)
    
    # 获取该省份的民族分布
    nation_distribution = REGIONAL_NATION_DISTRIBUTION.get(province, REGIONAL_NATION_DISTRIBUTION['北京市'])
    
    # 生成随机数
    rand = random.random()
    cumulative_prob = 0
    
    # 按概率选择民族
    for nation, prob in nation_distribution.items():
        cumulative_prob += prob
        if rand <= cumulative_prob:
            if nation == '其他':
                # 如果是"其他"，从所有民族中随机选择（除了主要民族）
                main_nations = list(nation_distribution.keys())
                main_nations.remove('其他')
                return random.choice([n for n in REAL_NATIONS if n not in main_nations])
            else:
                return nation
    
    # 如果出现意外情况，返回汉族
    return '汉'

# 身份证校验码权重
CHECK_CODE_WEIGHTS = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2]

# 校验码对应表
CHECK_CODE_MAP = ['1', '0', 'X', '9', '8', '7', '6', '5', '4', '3', '2']

def calculate_check_code(id_without_check):
    """计算身份证校验码"""
    if len(id_without_check) != 17:
        return None
    
    total = 0
    for i in range(17):
        total += int(id_without_check[i]) * CHECK_CODE_WEIGHTS[i]
    
    remainder = total % 11
    return CHECK_CODE_MAP[remainder]

def generate_realistic_id_number(gender=None):
    """生成真实的身份证号码，支持指定性别"""
    # 随机选择区域码
    area_code = random.choice(list(REAL_AREA_CODES.keys()))
    
    # 生成出生日期（18-80岁）
    current_year = datetime.now().year
    birth_year = random.randint(current_year - 80, current_year - 18)
    birth_month = random.randint(1, 12)
    birth_day = random.randint(1, 28)  # 避免2月29日的复杂性
    
    birth_date = f"{birth_year:04d}{birth_month:02d}{birth_day:02d}"
    
    # 生成顺序码（3位数字）
    # 第17位（倒数第二位）与性别有关：
    # 奇数表示男性，偶数表示女性
    if gender == '男':
        # 生成奇数
        sequence_17 = random.choice([1, 3, 5, 7, 9])
        sequence_other = random.randint(0, 99)
        sequence = f"{sequence_other:02d}{sequence_17}"
    elif gender == '女':
        # 生成偶数
        sequence_17 = random.choice([0, 2, 4, 6, 8])
        sequence_other = random.randint(0, 99)
        sequence = f"{sequence_other:02d}{sequence_17}"
    else:
        # 随机生成
        sequence = f"{random.randint(0, 999):03d}"
    
    # 前17位
    id_without_check = area_code + birth_date + sequence
    
    # 计算校验码
    check_code = calculate_check_code(id_without_check)
    
    return id_without_check + check_code

def get_authority_by_area_code(area_code):
    """根据区域码获取对应的发证机关"""
    area_name = REAL_AREA_CODES.get(area_code, '')
    if not area_name:
        return random.choice(list(REAL_AUTHORITIES.values())[0])
    
    # 提取省份名称
    if area_name.startswith('北京市'):
        province = '北京市'
    elif area_name.startswith('上海市'):
        province = '上海市'
    elif area_name.startswith('天津市'):
        province = '天津市'
    elif area_name.startswith('重庆市'):
        province = '重庆市'
    elif area_name.startswith('内蒙古'):
        province = '内蒙古'
    elif area_name.startswith('新疆'):
        province = '新疆'
    elif area_name.startswith('西藏'):
        province = '西藏'
    elif area_name.startswith('广西'):
        province = '广西'
    elif area_name.startswith('宁夏'):
        province = '宁夏'
    elif area_name.startswith('云南省'):
        province = '云南省'
    elif area_name.startswith('贵州省'):
        province = '贵州省'
    elif area_name.startswith('四川省'):
        province = '四川省'
    elif area_name.startswith('湖南省'):
        province = '湖南省'
    elif area_name.startswith('湖北省'):
        province = '湖北省'
    elif area_name.startswith('广东省'):
        province = '广东省'
    elif area_name.startswith('海南省'):
        province = '海南省'
    elif area_name.startswith('福建省'):
        province = '福建省'
    elif area_name.startswith('浙江省'):
        province = '浙江省'
    elif area_name.startswith('江苏省'):
        province = '江苏省'
    elif area_name.startswith('山东省'):
        province = '山东省'
    elif area_name.startswith('河南省'):
        province = '河南省'
    elif area_name.startswith('河北省'):
        province = '河北省'
    elif area_name.startswith('山西省'):
        province = '山西省'
    elif area_name.startswith('陕西省'):
        province = '陕西省'
    elif area_name.startswith('甘肃省'):
        province = '甘肃省'
    elif area_name.startswith('青海省'):
        province = '青海省'
    elif area_name.startswith('辽宁省'):
        province = '辽宁省'
    elif area_name.startswith('吉林省'):
        province = '吉林省'
    elif area_name.startswith('黑龙江省'):
        province = '黑龙江省'
    elif area_name.startswith('安徽省'):
        province = '安徽省'
    elif area_name.startswith('江西省'):
        province = '江西省'
    else:
        # 提取省份名称（前两个字符）
        province = area_name[:2] + '省'
    
    # 获取该省份的发证机关列表
    authorities = REAL_AUTHORITIES.get(province, REAL_AUTHORITIES['北京市'])
    
    # 如果该省份没有对应的发证机关，根据地区生成合适的发证机关
    if province not in REAL_AUTHORITIES:
        # 根据地区生成发证机关名称
        if area_name.startswith('哈尔滨'):
            return '哈尔滨市公安局道里分局'
        elif area_name.startswith('长春'):
            return '长春市公安局南关分局'
        elif area_name.startswith('沈阳'):
            return '沈阳市公安局和平分局'
        elif area_name.startswith('大连'):
            return '大连市公安局中山分局'
        elif area_name.startswith('济南'):
            return '济南市公安局历下分局'
        elif area_name.startswith('青岛'):
            return '青岛市公安局市南分局'
        elif area_name.startswith('郑州'):
            return '郑州市公安局中原分局'
        elif area_name.startswith('西安'):
            return '西安市公安局新城分局'
        elif area_name.startswith('兰州'):
            return '兰州市公安局城关分局'
        elif area_name.startswith('西宁'):
            return '西宁市公安局城东分局'
        elif area_name.startswith('合肥'):
            return '合肥市公安局瑶海分局'
        elif area_name.startswith('南昌'):
            return '南昌市公安局东湖分局'
        elif area_name.startswith('太原'):
            return '太原市公安局小店分局'
        elif area_name.startswith('石家庄'):
            return '石家庄市公安局长安分局'
        else:
            # 默认生成格式：XX市公安局XX分局
            city_name = area_name.split('市')[0] if '市' in area_name else area_name[:2]
            district_name = area_name.split('市')[1].split('区')[0] if '区' in area_name else '城区'
            return f'{city_name}市公安局{district_name}分局'
    
    return random.choice(authorities)

def generate_realistic_address(area_code):
    """生成真实的地址，与发证机关相关联"""
    area_name = REAL_AREA_CODES.get(area_code, '北京市东城区')
    
    # 根据地区生成对应的街道名称
    if area_name.startswith('北京市'):
        streets = ['建国门街道', '朝阳门街道', '东华门街道', '王府井街道', '东四街道',
                  '景山街道', '交道口街道', '安定门街道', '北新桥街道', '东直门街道',
                  '和平里街道', '前门街道', '崇文门街道', '东花市街道', '龙潭街道',
                  '体育馆路街道', '天坛街道', '永定门外街道', '东高地街道', '西罗园街道',
                  '西长安街街道', '金融街街道', '德胜街道', '什刹海街道', '新街口街道',
                  '月坛街道', '展览路街道', '阜外街道', '广安门外街道', '广安门内街道']
    elif area_name.startswith('上海市'):
        streets = ['南京东路街道', '外滩街道', '半淞园路街道', '小东门街道', '豫园街道',
                  '老西门街道', '五里桥街道', '打浦桥街道', '淮海中路街道', '瑞金二路街道',
                  '天平路街道', '湖南路街道', '徐家汇街道', '枫林路街道', '斜土路街道',
                  '田林街道', '虹梅路街道', '康健新村街道', '龙华街道', '漕河泾街道']
    elif area_name.startswith('天津市'):
        streets = ['劝业场街道', '小白楼街道', '五大道街道', '南市街道', '新兴街道',
                  '南营门街道', '体育馆街道', '兴南街道', '向阳路街道', '嘉陵道街道',
                  '王顶堤街道', '水上公园街道', '华苑街道', '学府街道', '万兴街道']
    elif area_name.startswith('重庆市'):
        streets = ['解放碑街道', '朝天门街道', '望龙门街道', '南纪门街道', '菜园坝街道',
                  '两路口街道', '上清寺街道', '大溪沟街道', '大坪街道', '化龙桥街道',
                  '石油路街道', '七星岗街道', '较场口街道', '临江门街道', '储奇门街道']
    elif area_name.startswith('内蒙古'):
        streets = ['新华街道', '中山东路街道', '西街街道', '东街街道', '南街街道',
                  '北街街道', '环河街道', '通道街道', '钢铁路街道', '光明路街道',
                  '海拉尔路街道', '锡林路街道', '大学西路街道', '大学东路街道', '乌兰察布路街道']
    elif area_name.startswith('新疆'):
        streets = ['解放北路街道', '解放南路街道', '新华北路街道', '新华南路街道', '和平路街道',
                  '胜利路街道', '友好北路街道', '友好南路街道', '扬子江路街道', '长江路街道',
                  '黄河路街道', '黑龙江路街道', '北京路街道', '天津路街道', '上海路街道']
    elif area_name.startswith('西藏'):
        streets = ['八廓街道', '吉日街道', '吉崩岗街道', '扎细街道', '公德林街道',
                  '嘎玛贡桑街道', '两岛街道', '金珠西路街道', '金珠中路街道', '金珠东路街道',
                  '夺底街道', '纳金街道', '娘热街道', '蔡公堂街道', '东嘎街道']
    elif area_name.startswith('广西'):
        streets = ['民生街道', '朝阳街道', '兴宁街道', '新竹街道', '建政街道',
                  '中山街道', '南湖街道', '津头街道', '青秀山街道', '仙葫街道',
                  '刘圩街道', '南阳街道', '伶俐街道', '长塘街道', '蒲庙街道']
    elif area_name.startswith('宁夏'):
        streets = ['凤凰北街街道', '前进街街道', '文化街街道', '富宁街街道', '新华街街道',
                  '玉皇阁北街街道', '中山南街街道', '胜利街街道', '银古路街道', '丽景街街道',
                  '满城北街街道', '上海西路街道', '北京中路街道', '长城中路街道', '黄河东路街道']
    elif area_name.startswith('云南省'):
        streets = ['护国街道', '大观街道', '华山街道', '龙翔街道', '丰宁街道',
                  '莲华街道', '红云街道', '黑林铺街道', '普吉街道', '沙朗街道',
                  '厂口街道', '马街街道', '金碧街道', '永昌街道', '前卫街道']
    elif area_name.startswith('贵州省'):
        streets = ['中华北路街道', '中华中路街道', '中华南路街道', '市府路街道', '河滨街道',
                  '遵义路街道', '兴关路街道', '油榨街街道', '龙洞堡街道', '二戈寨街道',
                  '小碧街道', '永乐街道', '新堡街道', '水田街道', '羊昌街道']
    elif area_name.startswith('四川省'):
        streets = ['春熙路街道', '书院街街道', '合江亭街道', '水井坊街道', '牛市口街道',
                  '龙舟路街道', '双桂路街道', '莲新街道', '沙河街道', '东光街道',
                  '狮子山街道', '成龙路街道', '柳江街道', '三圣街道', '锦华路街道']
    elif area_name.startswith('湖南省'):
        streets = ['定王台街道', '都正街街道', '解放路街道', '文艺路街道', '韭菜园街道',
                  '朝阳街街道', '五里牌街道', '马王堆街道', '东屯渡街道', '东岸街道',
                  '火星街道', '湘湖街道', '东湖街道', '马坡岭街道', '东湖塘街道']
    elif area_name.startswith('湖北省'):
        streets = ['大智街道', '一元街道', '车站街道', '四唯街道', '永清街道',
                  '西马街道', '球场街道', '劳动街道', '二七街道', '新村街道',
                  '丹水池街道', '后湖街道', '谌家矶街道', '百步亭街道', '塔子湖街道']
    elif area_name.startswith('广东省'):
        streets = ['北京街道', '人民街道', '流花街道', '光塔街道', '六榕街道',
                  '诗书街道', '大新街道', '一德街道', '华林街道', '多宝街道',
                  '昌华街道', '逢源街道', '龙津街道', '金花街道', '彩虹街道']
    elif area_name.startswith('海南省'):
        streets = ['中山街道', '滨海街道', '大同街道', '海垦街道', '金宇街道',
                  '海秀街道', '秀英街道', '长流街道', '西秀街道', '石山镇街道',
                  '永兴镇街道', '东山镇街道', '新坡镇街道', '龙泉镇街道', '龙桥镇街道']
    elif area_name.startswith('福建省'):
        streets = ['鼓东街道', '鼓西街道', '温泉街道', '东街街道', '南街街道',
                  '安泰街道', '华大街道', '水部街道', '五凤街道', '洪山镇街道',
                  '新店镇街道', '岳峰镇街道', '宦溪镇街道', '寿山乡街道', '日溪乡街道']
    elif area_name.startswith('浙江省'):
        streets = ['清波街道', '湖滨街道', '小营街道', '望江街道', '南星街道',
                  '紫阳街道', '闸弄口街道', '凯旋街道', '采荷街道', '四季青街道',
                  '笕桥街道', '丁兰街道', '九堡街道', '彭埠街道', '新塘街道']
    elif area_name.startswith('江苏省'):
        streets = ['新街口街道', '朝天宫街道', '莫愁湖街道', '建邺路街道', '南湖街道',
                  '兴隆街道', '双闸街道', '江心洲街道', '沙洲街道', '莲花街道',
                  '仙林街道', '栖霞街道', '迈皋桥街道', '燕子矶街道', '马群街道']
    elif area_name.startswith('山东省'):
        streets = ['解放路街道', '千佛山街道', '趵突泉街道', '泉城路街道', '大明湖街道',
                  '东关街道', '文东街道', '建新街道', '甸柳街道', '燕山街道',
                  '姚家街道', '龙洞街道', '智远街道', '舜华路街道', '孙村街道']
    elif area_name.startswith('河南省'):
        streets = ['建设路街道', '三官庙街道', '秦岭路街道', '棉纺路街道', '桐柏路街道',
                  '绿东村街道', '汝河路街道', '航海西路街道', '中原西路街道', '西流湖街道',
                  '须水街道', '石佛街道', '沟赵街道', '枫杨街道', '梧桐街道']
    elif area_name.startswith('陕西省'):
        streets = ['西一路街道', '长乐中路街道', '中山门街道', '韩森寨街道', '解放门街道',
                  '自强路街道', '太华路街道', '长乐西路街道', '胡家庙街道', '长缨东路街道',
                  '长乐东路街道', '纺织城街道', '红旗街道', '席王街道', '十里铺街道']
    elif area_name.startswith('甘肃省'):
        streets = ['酒泉路街道', '张掖路街道', '临夏路街道', '白银路街道', '广武门街道',
                  '皋兰路街道', '渭源路街道', '团结新村街道', '东岗西路街道', '铁路东村街道',
                  '铁路西村街道', '五泉街道', '嘉峪关路街道', '焦家湾街道', '拱星墩街道']
    elif area_name.startswith('青海省'):
        streets = ['东关大街街道', '清真巷街道', '大众街街道', '周家泉街道', '火车站街道',
                  '八一路街道', '林家崖街道', '乐家湾街道', '韵家口街道', '东川工业园区街道',
                  '生物园区街道', '朝阳街道', '小桥大街街道', '马坊街道', '大堡子街道']
    elif area_name.startswith('辽宁省'):
        streets = ['沈河街道', '大南街道', '滨河街道', '万莲街道', '大西街道',
                  '山东庙街道', '朱剪炉街道', '新北站街道', '风雨坛街道', '皇城街道',
                  '五里河街道', '南塔街道', '泉园街道', '丰乐街道', '东陵街道']
    elif area_name.startswith('吉林省'):
        streets = ['南关街道', '自强街道', '民康街道', '新春街道', '长通街道',
                  '全安街道', '永吉街道', '桃源街道', '鸿城街道', '明珠街道',
                  '富裕街道', '临河街道', '永兴街道', '净月街道', '新立城镇街道']
    elif area_name.startswith('黑龙江省'):
        streets = ['兆麟街道', '新阳路街道', '抚顺街道', '共乐街道', '新华街道',
                  '城乡路街道', '工农街道', '尚志街道', '工程街道', '经纬街道',
                  '通江街道', '斯大林街道', '靖宇街道', '大兴街道', '胜利街道']
    elif area_name.startswith('安徽省'):
        streets = ['明光路街道', '胜利路街道', '和平路街道', '大通路街道', '红光街道',
                  '七里站街道', '铜陵路街道', '三里街街道', '车站街道', '长淮街道',
                  '方庙街道', '嘉山路街道', '龙岗综合经济开发区街道', '磨店街道', '三十头街道']
    elif area_name.startswith('江西省'):
        streets = ['公园街道', '滕王阁街道', '百花洲街道', '墩子塘街道', '大院街道',
                  '董家窑街道', '彭家桥街道', '沙井街道', '八一桥街道', '子固路街道',
                  '南浦街道', '广润门街道', '西湖街道', '系马桩街道', '绳金塔街道']
    else:
        # 默认街道名称
        streets = ['建设路街道', '人民路街道', '解放路街道', '和平路街道', '中山路街道',
                  '新华路街道', '文化路街道', '民主路街道', '胜利路街道', '团结路街道',
                  '幸福路街道', '光明路街道', '前进路街道', '东风路街道', '向阳路街道']
    
    # 生成门牌号
    building_number = random.randint(1, 999)
    room_number = random.randint(1, 999)
    
    street = random.choice(streets)
    address = f"{area_name}{street}{building_number}号{room_number}室"
    
    return address

def generate_realistic_info(gender=None):
    """生成高度仿真的身份证信息，支持指定性别"""
    # 生成身份证号
    id_number = generate_realistic_id_number(gender)
    area_code = id_number[:6]
    
    # 从身份证号提取出生日期
    birth_date = id_number[6:14]
    birth_year = birth_date[:4]
    birth_month = birth_date[4:6]
    birth_day = birth_date[6:8]
    
    # 根据身份证号第17位确定性别（如果未指定）
    if gender is None:
        sequence_17 = int(id_number[16])
        gender = '男' if sequence_17 % 2 == 1 else '女'
    
    info = {
        'name': fake.name(),
        'sex': gender,
        'nation': select_nation_by_region(area_code),  # 使用基于地区的民族选择
        'year': birth_year,
        'month': birth_month,
        'day': birth_day,
        'address': generate_realistic_address(area_code),
        'id_number': id_number,
        'authority': get_authority_by_area_code(area_code),
        'valid_date': generate_valid_date()
    }
    
    info['birth'] = f"{info['year']}{info['month']}{info['day']}"
    return info

def generate_valid_date():
    """生成有效的证件有效期"""
    # 随机选择签发年份（2010-2025年）
    issue_year = random.randint(2010, 2025)
    issue_month = random.randint(1, 12)
    issue_day = random.randint(1, 28)
    
    # 有效期通常是10年或20年
    valid_years = random.choice([10, 20])
    expiry_year = issue_year + valid_years
    
    return f"{issue_year:04d}.{issue_month:02d}.{issue_day:02d}-{expiry_year:04d}.{issue_month:02d}.{issue_day:02d}"

def validate_id_number(id_number):
    """验证身份证号码是否有效"""
    if len(id_number) != 18:
        return False
    
    # 检查前17位是否都是数字
    if not id_number[:17].isdigit():
        return False
    
    # 检查最后一位校验码
    expected_check = calculate_check_code(id_number[:17])
    return id_number[17] == expected_check

# 测试函数
def test_realistic_generation():
    """测试高度仿真的身份证生成"""
    print("🧪 测试高度仿真的身份证生成...")
    
    # 测试随机性别生成
    print("\n📋 随机性别生成（5张）:")
    for i in range(5):
        info = generate_realistic_info()
        print(f"\n第 {i+1} 张身份证信息:")
        print(f"姓名: {info['name']}")
        print(f"性别: {info['sex']}")
        print(f"民族: {info['nation']}")
        print(f"出生: {info['year']}年{info['month']}月{info['day']}日")
        print(f"地址: {info['address']}")
        print(f"身份证号: {info['id_number']}")
        print(f"发证机关: {info['authority']}")
        print(f"有效期限: {info['valid_date']}")
        
        # 验证身份证号
        is_valid = validate_id_number(info['id_number'])
        print(f"身份证号验证: {'✅ 有效' if is_valid else '❌ 无效'}")
        
        # 验证性别与身份证号的一致性
        sequence_17 = int(info['id_number'][16])
        expected_gender = '男' if sequence_17 % 2 == 1 else '女'
        gender_match = info['sex'] == expected_gender
        print(f"性别一致性: {'✅ 匹配' if gender_match else '❌ 不匹配'} (第17位:{sequence_17})")
    
    # 测试指定男性生成
    print("\n📋 指定男性生成（3张）:")
    for i in range(3):
        info = generate_realistic_info(gender='男')
        print(f"\n第 {i+1} 张男性身份证信息:")
        print(f"姓名: {info['name']}")
        print(f"性别: {info['sex']}")
        print(f"身份证号: {info['id_number']}")
        
        # 验证性别与身份证号的一致性
        sequence_17 = int(info['id_number'][16])
        gender_match = sequence_17 % 2 == 1
        print(f"性别一致性: {'✅ 匹配' if gender_match else '❌ 不匹配'} (第17位:{sequence_17}, 应为奇数)")
    
    # 测试指定女性生成
    print("\n📋 指定女性生成（3张）:")
    for i in range(3):
        info = generate_realistic_info(gender='女')
        print(f"\n第 {i+1} 张女性身份证信息:")
        print(f"姓名: {info['name']}")
        print(f"性别: {info['sex']}")
        print(f"身份证号: {info['id_number']}")
        
        # 验证性别与身份证号的一致性
        sequence_17 = int(info['id_number'][16])
        gender_match = sequence_17 % 2 == 0
        print(f"性别一致性: {'✅ 匹配' if gender_match else '❌ 不匹配'} (第17位:{sequence_17}, 应为偶数)")

if __name__ == "__main__":
    test_realistic_generation()
